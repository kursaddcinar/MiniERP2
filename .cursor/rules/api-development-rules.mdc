# MiniERP API Development Rules

## API-First Development Priority
- **RULE**: Complete ALL API modifications before touching Web or WinForms
- **PROCESS**: Once API is declared complete, do NOT modify API layer further
- **GOAL**: API must serve both Web and WinForms clients perfectly

## Core API Components

### Controllers
- Located in [MiniERP.API/Controllers/](mdc:MiniERP.API/Controllers/)
- Must implement proper role-based authorization using `[Authorize(Roles = "...")]`
- All endpoints should return `ApiResponse<T>` format
- Include proper HTTP status codes and error handling

### Services
- Located in [MiniERP.API/Services/](mdc:MiniERP.API/Services/)
- Implement business logic and validation
- Use dependency injection pattern
- Return `ApiResponse<T>` objects to controllers

### Repositories
- Located in [MiniERP.API/Repositories/](mdc:MiniERP.API/Repositories/)
- Implement repository pattern with [GenericRepository](mdc:MiniERP.API/Repositories/GenericRepository.cs)
- Use [UnitOfWork](mdc:MiniERP.API/Repositories/UnitOfWork.cs) for transaction management
- Handle database operations and queries

### Models & DTOs
- Models: [MiniERP.API/Models/](mdc:MiniERP.API/Models/) - Entity classes
- DTOs: [MiniERP.API/DTOs/](mdc:MiniERP.API/DTOs/) - Data transfer objects
- Use [AutoMapper](mdc:MiniERP.API/Mappings/AutoMapperProfile.cs) for mapping

## Authentication & Authorization

### Current Implementation
- JWT Authentication configured in [Program.cs](mdc:MiniERP.API/Program.cs)
- [AuthService](mdc:MiniERP.API/Services/AuthService.cs) handles login/logout
- [AuthController](mdc:MiniERP.API/Controllers/AuthController.cs) provides auth endpoints

### Role-Based Security
- Use `[Authorize(Roles = "Admin,Manager")]` for controller/action level
- Roles: Admin, Manager, Sales, Purchase, Warehouse, Finance
- JWT tokens include role claims for client-side checking

## API Response Standards

### Success Response Format
```csharp
ApiResponse<T>.SuccessResult(data, message)
```

### Error Response Format
```csharp
ApiResponse<T>.ErrorResult(errorMessage)
```

### Pagination
- Use `PagedResult<T>` for list endpoints
- Include `PaginationParameters` in GET requests

## Endpoint Naming Convention
- Use RESTful conventions: GET, POST, PUT, DELETE
- Route patterns: `[Route("api/[controller]")]`
- Include version if needed: `api/v1/[controller]`

## Data Validation
- Use Data Annotations on DTOs
- Validate ModelState in controllers
- Return appropriate error messages for validation failures

## Error Handling
- Implement global exception handling
- Use Serilog for logging (configured in [Program.cs](mdc:MiniERP.API/Program.cs))
- Return consistent error responses

## Testing Requirements
- Test all endpoints with different roles
- Test authentication flow
- Test data validation
- Test error scenarios
- Verify DTO mappings work correctly

## Client Compatibility
- Ensure DTOs work for both Web and WinForms clients
- Consider serialization requirements
- Test API with both client types before completion

## Database Integration
- Use Entity Framework Core with [AppDbContext](mdc:MiniERP.API/Data/AppDbContext.cs)
- Follow existing database schema
- Do NOT modify database schema without user approval
