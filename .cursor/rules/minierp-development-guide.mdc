# MiniERP Development Guide

## Project Overview
MiniERP is a comprehensive business management system consisting of:
- **Database Layer**: SQL Server ([MiniERP_Clean.sql](mdc:Database/MiniERP_Clean.sql))
- **API Layer**: ASP.NET Core Web API ([MiniERP.API](mdc:MiniERP.API))
- **Web Layer**: ASP.NET Core MVC ([MiniERP.Web](mdc:MiniERP.Web))
- **WinForms Layer**: Windows Forms Desktop App ([MiniERP.WinForms](mdc:MiniERP.WinForms))

## Development Phases & Rules

### Phase 1: System Analysis (CURRENT)
- **Goal**: Analyze existing system thoroughly, identify gaps and errors
- **Rule**: Before making any changes, understand the complete current implementation
- **Key Areas**: 
  - Role-based authorization compatibility across all layers
  - API completeness for both Web and WinForms clients
  - Database schema sufficiency

### Phase 2: SQL Layer (STABLE)
- **Rule**: Do NOT modify SQL schema unless absolutely necessary
- **Process**: If SQL changes are needed, ASK USER FIRST before making modifications
- **Key Files**: [Database/MiniERP_Clean.sql](mdc:Database/MiniERP_Clean.sql), [Database/Test_Data_Insert.sql](mdc:Database/Test_Data_Insert.sql)
- **Current Status**: Database includes comprehensive role-based system with Users, Roles, UserRoles tables

### Phase 3: API Layer (PRIORITY)
- **Rule**: Complete ALL API modifications before touching Web or WinForms
- **Goal**: API must serve both Web and WinForms clients perfectly
- **Process**: Once API is complete, do NOT modify API layer further
- **Key Areas**:
  - Authentication & Authorization ([AuthController.cs](mdc:MiniERP.API/Controllers/AuthController.cs))
  - All business controllers and services
  - Role-based endpoint protection
  - DTO consistency across all clients

### Phase 4: Web Integration & Testing
- **Rule**: Integrate Web layer with completed API
- **Goal**: Test both API and Web application together
- **Key Areas**:
  - API service integration ([ApiService.cs](mdc:MiniERP.Web/Services/ApiService.cs))
  - Authentication flow ([AuthService.cs](mdc:MiniERP.Web/Services/AuthService.cs))
  - Role-based view access control

### Phase 5: WinForms Development
- **Rule**: Only start after API and Web are fully complete
- **Goal**: Implement WinForms client using the finalized API
- **Key Areas**: Forms, API integration, role-based form access

## Role-Based Authorization System

### Current Roles (as per database)
- **Admin**: Full system access
- **Manager**: Management level access
- **Sales**: Sales operations
- **Purchase**: Purchase operations  
- **Warehouse**: Inventory management
- **Finance**: Financial operations

### Implementation Pattern
- **API**: JWT tokens with role claims ([AuthService.cs](mdc:MiniERP.API/Services/AuthService.cs))
- **Web**: Cookie authentication with role mapping ([AuthService.cs](mdc:MiniERP.Web/Services/AuthService.cs))
- **WinForms**: Token-based API calls with role checking

### Key Files for Authorization
- [Role.cs](mdc:MiniERP.API/Models/Role.cs) - Role model
- [UserRole.cs](mdc:MiniERP.API/Models/UserRole.cs) - User-Role relationship
- [AppDbContext.cs](mdc:MiniERP.API/Data/AppDbContext.cs) - Database context
- [AuthController.cs](mdc:MiniERP.API/Controllers/AuthController.cs) - Authentication endpoints

## Development Guidelines

### Code Quality
- Follow existing patterns in the codebase
- Maintain consistency between API, Web, and WinForms layers
- Use established DTOs and models
- Implement proper error handling and logging

### Testing Strategy
- Test API endpoints thoroughly before web integration
- Test role-based access controls at each layer
- Verify data consistency across all clients
- Test authentication flow across all applications

### API-First Development
- Design API endpoints to serve both Web and WinForms needs
- Ensure DTOs are comprehensive and consistent
- Implement proper validation and error responses
- Document API changes for client implementations

## Key Architecture Decisions
- **Repository Pattern**: Used throughout API layer
- **Unit of Work**: Implemented for data access
- **AutoMapper**: Used for DTO mapping
- **JWT Authentication**: For API security
- **Cookie Authentication**: For Web application
- **Role-Based Authorization**: Implemented across all layers
